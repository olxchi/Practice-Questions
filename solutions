// you can also use imports, for example:
import java.util.*;

class Solution {
    public int oddoccurrence(int[] A) {
        // write your code in Java SE 8
        if (A.length == 1) {
            return A[0];
        }

        // sort array
        Arrays.sort(A);
        // loop through every element in my array of ints
        Stack<Integer> mystack = new Stack<Integer>();

        mystack.push(A[0]);

        for (int i = 1; i < A.length; i++) {
            if (mystack.peek() == A[i]) {
                mystack.pop();

            // if we're not at our last index
            if (A[i] != A.length - 1) {
                mystack.push(A[i+1]);
                i++;

            }

            } else {
                return mystack.peek();
            }
        }

        return A[A.length - 1];

    }
    
    public int frogjmp(int X, int Y, int D) { // X = 10, Y = 85, D = 30
    	
    	int frogposition = X; // 10
    	int frogtarget = Y; //85
    	int frogjump = D; // 30
    	
    	if (frogposition >= frogtarget) {
    		return 0;
    	}
    	
    	
    	int distancetotravel = frogtarget - frogposition; // 75
    	
    	int count = Math.floorDiv(distancetotravel, frogjump); // 2
    	
    	if (distancetotravel%frogjump != 0) {
    		count += 1;
    	}
    	
    	return count;
    }
    
    public int tapeequilibrium(int[] A) { // 3 1 2 4 3
    	int difference = 0; // 7
    	int sum = 0; // 0
    	int p_front = A[0]; // 13
    	
    	if (A.length == 2) {
    		return Math.abs(A[0] - A[1]);
    	}
    	
    	// sum all elements besides the first one
    	for (int j = 1; j < A.length; j++) {
    		sum += A[j];
    	}
    	
    	int min = Math.abs(A[0] - sum); // 1
    	
    	for (int i = 1; i < A.length - 1; i++) { // for every element of the array i = 3
    		p_front += A[i];
    		sum -= A[i];
    		difference = Math.abs(p_front - sum);
    		if (difference < min) {
    			min = difference;
    		}		
    		
    	}
    	
    	return min;
    }
    
    public int frog_river_one(int X, int[] A) { // 1 3 1 4 2 3 5 4   // -1 0 4 1 3 6
    	
    	// write your code in Java SE 8
        int[] indices = new int[X+1];
        Arrays.fill(indices, -1);

        if (A.length == 1) {
            if (X == A[0]) {
                return 0;
            } else {
                return -1;
            }

        }

        for (int i = 0; i < A.length; i++) {
            int position = A[i];
            if (position < (X+1) && indices[position] == -1) {
                indices[position] = i;
            }
        }
        int max = 0;
        for (int j = 1; j < indices.length; j++) {
            if (indices[j] == -1) {
                return -1;
            }

            if (indices[j] > max) {
                max = indices[j]; 
            }
        }

        return max;
    }
    
}
